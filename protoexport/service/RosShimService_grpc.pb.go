// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/RosShimService.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RosShimService_GetLogs_FullMethodName               = "/service.RosShimService/GetLogs"
	RosShimService_GetAmountOfChilds_FullMethodName     = "/service.RosShimService/GetAmountOfChilds"
	RosShimService_GetChildPids_FullMethodName          = "/service.RosShimService/GetChildPids"
	RosShimService_StartService_FullMethodName          = "/service.RosShimService/StartService"
	RosShimService_StopRosNode_FullMethodName           = "/service.RosShimService/StopRosNode"
	RosShimService_RestartService_FullMethodName        = "/service.RosShimService/RestartService"
	RosShimService_CheckHealth_FullMethodName           = "/service.RosShimService/CheckHealth"
	RosShimService_CheckHealthRosNode_FullMethodName    = "/service.RosShimService/CheckHealthRosNode"
	RosShimService_CheckHealthRosNodes_FullMethodName   = "/service.RosShimService/CheckHealthRosNodes"
	RosShimService_CheckTaskStatus_FullMethodName       = "/service.RosShimService/CheckTaskStatus"
	RosShimService_Register_FullMethodName              = "/service.RosShimService/Register"
	RosShimService_DeRegister_FullMethodName            = "/service.RosShimService/DeRegister"
	RosShimService_RestartRos2Shim_FullMethodName       = "/service.RosShimService/RestartRos2Shim"
	RosShimService_GetSystemUtilization_FullMethodName  = "/service.RosShimService/GetSystemUtilization"
	RosShimService_GetRosNodeUtilization_FullMethodName = "/service.RosShimService/GetRosNodeUtilization"
	RosShimService_CheckPidVerification_FullMethodName  = "/service.RosShimService/CheckPidVerification"
	RosShimService_Shutdown_FullMethodName              = "/service.RosShimService/Shutdown"
)

// RosShimServiceClient is the client API for RosShimService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RosShimServiceClient interface {
	GetLogs(ctx context.Context, in *LaunchFile, opts ...grpc.CallOption) (*LogInfo, error)
	GetAmountOfChilds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChildAmount, error)
	GetChildPids(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChildPidsResponse, error)
	StartService(ctx context.Context, in *StartParams, opts ...grpc.CallOption) (*StatusResponse, error)
	StopRosNode(ctx context.Context, in *LaunchFile, opts ...grpc.CallOption) (*StatusResponse, error)
	RestartService(ctx context.Context, in *StartParams, opts ...grpc.CallOption) (*StatusResponse, error)
	CheckHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	CheckHealthRosNode(ctx context.Context, in *LaunchFile, opts ...grpc.CallOption) (*HealthResponse, error)
	CheckHealthRosNodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponses, error)
	CheckTaskStatus(ctx context.Context, in *TaskStatus, opts ...grpc.CallOption) (*StatusResponse, error)
	Register(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*StatusResponse, error)
	DeRegister(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	RestartRos2Shim(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*StatusResponse, error)
	GetSystemUtilization(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DataUtilizationSystem, error)
	GetRosNodeUtilization(ctx context.Context, in *LaunchFile, opts ...grpc.CallOption) (*DataUtilizationRosNode, error)
	CheckPidVerification(ctx context.Context, in *CheckPids, opts ...grpc.CallOption) (*PidVerifications, error)
	Shutdown(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*StatusResponse, error)
}

type rosShimServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRosShimServiceClient(cc grpc.ClientConnInterface) RosShimServiceClient {
	return &rosShimServiceClient{cc}
}

func (c *rosShimServiceClient) GetLogs(ctx context.Context, in *LaunchFile, opts ...grpc.CallOption) (*LogInfo, error) {
	out := new(LogInfo)
	err := c.cc.Invoke(ctx, RosShimService_GetLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) GetAmountOfChilds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChildAmount, error) {
	out := new(ChildAmount)
	err := c.cc.Invoke(ctx, RosShimService_GetAmountOfChilds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) GetChildPids(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChildPidsResponse, error) {
	out := new(ChildPidsResponse)
	err := c.cc.Invoke(ctx, RosShimService_GetChildPids_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) StartService(ctx context.Context, in *StartParams, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, RosShimService_StartService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) StopRosNode(ctx context.Context, in *LaunchFile, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, RosShimService_StopRosNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) RestartService(ctx context.Context, in *StartParams, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, RosShimService_RestartService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) CheckHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, RosShimService_CheckHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) CheckHealthRosNode(ctx context.Context, in *LaunchFile, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, RosShimService_CheckHealthRosNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) CheckHealthRosNodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponses, error) {
	out := new(HealthResponses)
	err := c.cc.Invoke(ctx, RosShimService_CheckHealthRosNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) CheckTaskStatus(ctx context.Context, in *TaskStatus, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, RosShimService_CheckTaskStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) Register(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, RosShimService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) DeRegister(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, RosShimService_DeRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) RestartRos2Shim(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, RosShimService_RestartRos2Shim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) GetSystemUtilization(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DataUtilizationSystem, error) {
	out := new(DataUtilizationSystem)
	err := c.cc.Invoke(ctx, RosShimService_GetSystemUtilization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) GetRosNodeUtilization(ctx context.Context, in *LaunchFile, opts ...grpc.CallOption) (*DataUtilizationRosNode, error) {
	out := new(DataUtilizationRosNode)
	err := c.cc.Invoke(ctx, RosShimService_GetRosNodeUtilization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) CheckPidVerification(ctx context.Context, in *CheckPids, opts ...grpc.CallOption) (*PidVerifications, error) {
	out := new(PidVerifications)
	err := c.cc.Invoke(ctx, RosShimService_CheckPidVerification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rosShimServiceClient) Shutdown(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, RosShimService_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RosShimServiceServer is the server API for RosShimService service.
// All implementations must embed UnimplementedRosShimServiceServer
// for forward compatibility
type RosShimServiceServer interface {
	GetLogs(context.Context, *LaunchFile) (*LogInfo, error)
	GetAmountOfChilds(context.Context, *Empty) (*ChildAmount, error)
	GetChildPids(context.Context, *Empty) (*ChildPidsResponse, error)
	StartService(context.Context, *StartParams) (*StatusResponse, error)
	StopRosNode(context.Context, *LaunchFile) (*StatusResponse, error)
	RestartService(context.Context, *StartParams) (*StatusResponse, error)
	CheckHealth(context.Context, *Empty) (*HealthResponse, error)
	CheckHealthRosNode(context.Context, *LaunchFile) (*HealthResponse, error)
	CheckHealthRosNodes(context.Context, *Empty) (*HealthResponses, error)
	CheckTaskStatus(context.Context, *TaskStatus) (*StatusResponse, error)
	Register(context.Context, *Secret) (*StatusResponse, error)
	DeRegister(context.Context, *Empty) (*StatusResponse, error)
	RestartRos2Shim(context.Context, *Secret) (*StatusResponse, error)
	GetSystemUtilization(context.Context, *Empty) (*DataUtilizationSystem, error)
	GetRosNodeUtilization(context.Context, *LaunchFile) (*DataUtilizationRosNode, error)
	CheckPidVerification(context.Context, *CheckPids) (*PidVerifications, error)
	Shutdown(context.Context, *Secret) (*StatusResponse, error)
	mustEmbedUnimplementedRosShimServiceServer()
}

// UnimplementedRosShimServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRosShimServiceServer struct {
}

func (UnimplementedRosShimServiceServer) GetLogs(context.Context, *LaunchFile) (*LogInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedRosShimServiceServer) GetAmountOfChilds(context.Context, *Empty) (*ChildAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmountOfChilds not implemented")
}
func (UnimplementedRosShimServiceServer) GetChildPids(context.Context, *Empty) (*ChildPidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildPids not implemented")
}
func (UnimplementedRosShimServiceServer) StartService(context.Context, *StartParams) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartService not implemented")
}
func (UnimplementedRosShimServiceServer) StopRosNode(context.Context, *LaunchFile) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRosNode not implemented")
}
func (UnimplementedRosShimServiceServer) RestartService(context.Context, *StartParams) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartService not implemented")
}
func (UnimplementedRosShimServiceServer) CheckHealth(context.Context, *Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedRosShimServiceServer) CheckHealthRosNode(context.Context, *LaunchFile) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealthRosNode not implemented")
}
func (UnimplementedRosShimServiceServer) CheckHealthRosNodes(context.Context, *Empty) (*HealthResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealthRosNodes not implemented")
}
func (UnimplementedRosShimServiceServer) CheckTaskStatus(context.Context, *TaskStatus) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTaskStatus not implemented")
}
func (UnimplementedRosShimServiceServer) Register(context.Context, *Secret) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRosShimServiceServer) DeRegister(context.Context, *Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeRegister not implemented")
}
func (UnimplementedRosShimServiceServer) RestartRos2Shim(context.Context, *Secret) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartRos2Shim not implemented")
}
func (UnimplementedRosShimServiceServer) GetSystemUtilization(context.Context, *Empty) (*DataUtilizationSystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemUtilization not implemented")
}
func (UnimplementedRosShimServiceServer) GetRosNodeUtilization(context.Context, *LaunchFile) (*DataUtilizationRosNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRosNodeUtilization not implemented")
}
func (UnimplementedRosShimServiceServer) CheckPidVerification(context.Context, *CheckPids) (*PidVerifications, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPidVerification not implemented")
}
func (UnimplementedRosShimServiceServer) Shutdown(context.Context, *Secret) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedRosShimServiceServer) mustEmbedUnimplementedRosShimServiceServer() {}

// UnsafeRosShimServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RosShimServiceServer will
// result in compilation errors.
type UnsafeRosShimServiceServer interface {
	mustEmbedUnimplementedRosShimServiceServer()
}

func RegisterRosShimServiceServer(s grpc.ServiceRegistrar, srv RosShimServiceServer) {
	s.RegisterService(&RosShimService_ServiceDesc, srv)
}

func _RosShimService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).GetLogs(ctx, req.(*LaunchFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_GetAmountOfChilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).GetAmountOfChilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_GetAmountOfChilds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).GetAmountOfChilds(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_GetChildPids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).GetChildPids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_GetChildPids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).GetChildPids(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_StartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).StartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_StartService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).StartService(ctx, req.(*StartParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_StopRosNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).StopRosNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_StopRosNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).StopRosNode(ctx, req.(*LaunchFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_RestartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).RestartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_RestartService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).RestartService(ctx, req.(*StartParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).CheckHealth(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_CheckHealthRosNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).CheckHealthRosNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_CheckHealthRosNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).CheckHealthRosNode(ctx, req.(*LaunchFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_CheckHealthRosNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).CheckHealthRosNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_CheckHealthRosNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).CheckHealthRosNodes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_CheckTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).CheckTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_CheckTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).CheckTaskStatus(ctx, req.(*TaskStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).Register(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_DeRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).DeRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_DeRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).DeRegister(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_RestartRos2Shim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).RestartRos2Shim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_RestartRos2Shim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).RestartRos2Shim(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_GetSystemUtilization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).GetSystemUtilization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_GetSystemUtilization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).GetSystemUtilization(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_GetRosNodeUtilization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).GetRosNodeUtilization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_GetRosNodeUtilization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).GetRosNodeUtilization(ctx, req.(*LaunchFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_CheckPidVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).CheckPidVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_CheckPidVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).CheckPidVerification(ctx, req.(*CheckPids))
	}
	return interceptor(ctx, in, info, handler)
}

func _RosShimService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosShimServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RosShimService_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosShimServiceServer).Shutdown(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

// RosShimService_ServiceDesc is the grpc.ServiceDesc for RosShimService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RosShimService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.RosShimService",
	HandlerType: (*RosShimServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogs",
			Handler:    _RosShimService_GetLogs_Handler,
		},
		{
			MethodName: "GetAmountOfChilds",
			Handler:    _RosShimService_GetAmountOfChilds_Handler,
		},
		{
			MethodName: "GetChildPids",
			Handler:    _RosShimService_GetChildPids_Handler,
		},
		{
			MethodName: "StartService",
			Handler:    _RosShimService_StartService_Handler,
		},
		{
			MethodName: "StopRosNode",
			Handler:    _RosShimService_StopRosNode_Handler,
		},
		{
			MethodName: "RestartService",
			Handler:    _RosShimService_RestartService_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _RosShimService_CheckHealth_Handler,
		},
		{
			MethodName: "CheckHealthRosNode",
			Handler:    _RosShimService_CheckHealthRosNode_Handler,
		},
		{
			MethodName: "CheckHealthRosNodes",
			Handler:    _RosShimService_CheckHealthRosNodes_Handler,
		},
		{
			MethodName: "CheckTaskStatus",
			Handler:    _RosShimService_CheckTaskStatus_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _RosShimService_Register_Handler,
		},
		{
			MethodName: "DeRegister",
			Handler:    _RosShimService_DeRegister_Handler,
		},
		{
			MethodName: "RestartRos2Shim",
			Handler:    _RosShimService_RestartRos2Shim_Handler,
		},
		{
			MethodName: "GetSystemUtilization",
			Handler:    _RosShimService_GetSystemUtilization_Handler,
		},
		{
			MethodName: "GetRosNodeUtilization",
			Handler:    _RosShimService_GetRosNodeUtilization_Handler,
		},
		{
			MethodName: "CheckPidVerification",
			Handler:    _RosShimService_CheckPidVerification_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _RosShimService_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/RosShimService.proto",
}

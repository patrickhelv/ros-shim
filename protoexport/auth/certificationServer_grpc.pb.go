// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/certificationServer.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RegisterRosShim_Register_FullMethodName = "/auth.registerRosShim/Register"
)

// RegisterRosShimClient is the client API for RegisterRosShim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterRosShimClient interface {
	Register(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*PortInfo, error)
}

type registerRosShimClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterRosShimClient(cc grpc.ClientConnInterface) RegisterRosShimClient {
	return &registerRosShimClient{cc}
}

func (c *registerRosShimClient) Register(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*PortInfo, error) {
	out := new(PortInfo)
	err := c.cc.Invoke(ctx, RegisterRosShim_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterRosShimServer is the server API for RegisterRosShim service.
// All implementations must embed UnimplementedRegisterRosShimServer
// for forward compatibility
type RegisterRosShimServer interface {
	Register(context.Context, *Secret) (*PortInfo, error)
	mustEmbedUnimplementedRegisterRosShimServer()
}

// UnimplementedRegisterRosShimServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterRosShimServer struct {
}

func (UnimplementedRegisterRosShimServer) Register(context.Context, *Secret) (*PortInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegisterRosShimServer) mustEmbedUnimplementedRegisterRosShimServer() {}

// UnsafeRegisterRosShimServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterRosShimServer will
// result in compilation errors.
type UnsafeRegisterRosShimServer interface {
	mustEmbedUnimplementedRegisterRosShimServer()
}

func RegisterRegisterRosShimServer(s grpc.ServiceRegistrar, srv RegisterRosShimServer) {
	s.RegisterService(&RegisterRosShim_ServiceDesc, srv)
}

func _RegisterRosShim_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterRosShimServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegisterRosShim_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterRosShimServer).Register(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterRosShim_ServiceDesc is the grpc.ServiceDesc for RegisterRosShim service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterRosShim_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.registerRosShim",
	HandlerType: (*RegisterRosShimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _RegisterRosShim_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/certificationServer.proto",
}
